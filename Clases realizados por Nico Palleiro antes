/*

Clases

******************************************************************************************
Mascota.h
******************************************************************************************
#ifndef MASCOTA_H
#define MASCOTA_H

#include <string>
#include "Genero.h"

using namespace std;

class Mascota {
protected:
    string nombre;
    Genero genero;
    float peso;

public:
    Mascota(string nombre, Genero genero, float peso);
    virtual ~Mascota();
    
    string getNombre() const;
    Genero getGenero() const;
    float getPeso() const;

    virtual float obtenerRacionDiaria() const = 0;
};

#endif

******************************************************************************************
Mascota.cpp
******************************************************************************************
#include "Mascota.h"

Mascota::Mascota(string nombre, Genero genero, float peso)
    : nombre(nombre), genero(genero), peso(peso) {}

Mascota::~Mascota() {}

string Mascota::getNombre() const { return nombre; }
Genero Mascota::getGenero() const { return genero; }
float Mascota::getPeso() const { return peso; }

******************************************************************************************
Perro.h
******************************************************************************************
#ifndef PERRO_H
#define PERRO_H

#include "Mascota.h"
#include "RazaPerro.h"

class Perro : public Mascota {
private:
    RazaPerro raza;
    bool vacunaCachorro;

public:
    Perro(string nombre, Genero genero, float peso, RazaPerro raza, bool vacunaCachorro);
    ~Perro();

    RazaPerro getRaza() const;
    bool tieneVacunaCachorro() const;
    
    float obtenerRacionDiaria() const override;
};

#endif


******************************************************************************************
Perro.cpp 
******************************************************************************************
#include "Perro.h"

Perro::Perro(string nombre, Genero genero, float peso, RazaPerro raza, bool vacunaCachorro)
    : Mascota(nombre, genero, peso), raza(raza), vacunaCachorro(vacunaCachorro) {}

Perro::~Perro() {}

RazaPerro Perro::getRaza() const { return raza; }
bool Perro::tieneVacunaCachorro() const { return vacunaCachorro; }

float Perro::obtenerRacionDiaria() const {
    return peso * 0.025; // Se cambia la multiplicación a 0.025
}

******************************************************************************************
Gato.h
******************************************************************************************
#ifndef GATO_H
#define GATO_H

#include "Mascota.h"
#include "TipoPelo.h"

class Gato : public Mascota {
private:
    TipoPelo tipoPelo;

public:
    Gato(string nombre, Genero genero, float peso, TipoPelo tipoPelo);
    ~Gato();

    TipoPelo getTipoPelo() const;
    
    float obtenerRacionDiaria() const override;
};

#endif

******************************************************************************************
Gato.cpp (Corrección en la ración diaria)
******************************************************************************************
#include "Gato.h"

Gato::Gato(string nombre, Genero genero, float peso, TipoPelo tipoPelo)
    : Mascota(nombre, genero, peso), tipoPelo(tipoPelo) {}

Gato::~Gato() {}

TipoPelo Gato::getTipoPelo() const { return tipoPelo; }

float Gato::obtenerRacionDiaria() const {
    return peso * 0.015; // Se cambia la multiplicación a 0.015
}
******************************************************************************************

******************************************************************************************
Socio.h
******************************************************************************************
#ifndef SOCIO_H
#define SOCIO_H

#include <string>
#include "DtFecha.h"
#include "Mascota.h"
#include "Consulta.h"

#define MAX_MASCOTAS 10
#define MAX_CONSULTAS 20

using namespace std;

class Socio {
private:
    string ci;
    string nombre;
    DtFecha fechaIngreso;
    Mascota* mascotas[MAX_MASCOTAS];
    int cantMascotas;
    Consulta* consultas[MAX_CONSULTAS];
    int cantConsultas;

public:
    Socio(string ci, string nombre, DtFecha fechaIngreso);
    ~Socio();

    string getCi() const;
    string getNombre() const;
    DtFecha getFechaIngreso() const;
    
    void agregarMascota(Mascota* mascota);
    void agregarConsulta(Consulta* consulta);
    
    DtConsulta** getConsultasAntesDeFecha(DtFecha* fecha, int& cantConsultas) const;
    DtMascota** getMascotas(int& cantMascotas) const;
};

#endif

******************************************************************************************
Socio.cpp
******************************************************************************************
#include "Socio.h"
#include <stdexcept>

Socio::Socio(string ci, string nombre, DtFecha fechaIngreso)
    : ci(ci), nombre(nombre), fechaIngreso(fechaIngreso), cantMascotas(0), cantConsultas(0) {}

Socio::~Socio() {
    for (int i = 0; i < cantMascotas; i++)
        delete mascotas[i];
    for (int i = 0; i < cantConsultas; i++)
        delete consultas[i];
}

string Socio::getCi() const { return ci; }
string Socio::getNombre() const { return nombre; }
DtFecha Socio::getFechaIngreso() const { return fechaIngreso; }

void Socio::agregarMascota(Mascota* mascota) {
    if (cantMascotas < MAX_MASCOTAS) {
        mascotas[cantMascotas++] = mascota;
    } else {
        throw runtime_error("El socio ya tiene el máximo de mascotas permitido.");
    }
}

void Socio::agregarConsulta(Consulta* consulta) {
    if (cantConsultas < MAX_CONSULTAS) {
        consultas[cantConsultas++] = consulta;
    } else {
        throw runtime_error("El socio ya tiene el máximo de consultas permitido.");
    }
}

DtConsulta** Socio::getConsultasAntesDeFecha(DtFecha* fecha, int& cantConsultas) const {
    DtConsulta** resultado = new DtConsulta*[MAX_CONSULTAS];
    int contador = 0;
    for (int i = 0; i < cantConsultas; i++) {
        if (*consultas[i]->getFechaConsulta() < *fecha) {
            resultado[contador++] = new DtConsulta(consultas[i]->getFechaConsulta(), consultas[i]->getMotivo());
        }
    }
    cantConsultas = contador;
    return resultado;
}

DtMascota** Socio::getMascotas(int& cantMascotas) const {
    DtMascota** resultado = new DtMascota*[cantMascotas];
    for (int i = 0; i < cantMascotas; i++) {
        resultado[i] = mascotas[i]->toDataType();
    }
    return resultado;
}





******************************************************************************************
Consulta.h
******************************************************************************************
#ifndef CONSULTA_H
#define CONSULTA_H

#include "DtFecha.h"

class Consulta {
private:
    string motivo;
    DtFecha* fechaConsulta;

public:
    Consulta(string motivo, DtFecha* fechaConsulta);
    ~Consulta();

    string getMotivo() const;
    DtFecha* getFechaConsulta() const;
};

#endif

******************************************************************************************
Consulta.cpp
******************************************************************************************
#include "Consulta.h"

Consulta::Consulta(string motivo, DtFecha* fechaConsulta)
    : motivo(motivo), fechaConsulta(fechaConsulta) {}

Consulta::~Consulta() {
    delete fechaConsulta;
}

string Consulta::getMotivo() const { return motivo; }
DtFecha* Consulta::getFechaConsulta() const { return fechaConsulta; }





*/
